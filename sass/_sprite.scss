/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-bottom-name: 'arrow-bottom';
$arrow-bottom-x: 44px;
$arrow-bottom-y: 30px;
$arrow-bottom-offset-x: -44px;
$arrow-bottom-offset-y: -30px;
$arrow-bottom-width: 10px;
$arrow-bottom-height: 8px;
$arrow-bottom-total-width: 56px;
$arrow-bottom-total-height: 65px;
$arrow-bottom-image: '../img/sprite.png';
$arrow-bottom: (44px, 30px, -44px, -30px, 10px, 8px, 56px, 65px, '../img/sprite.png', 'arrow-bottom', );
$arrow-right-name: 'arrow-right';
$arrow-right-x: 44px;
$arrow-right-y: 14px;
$arrow-right-offset-x: -44px;
$arrow-right-offset-y: -14px;
$arrow-right-width: 9px;
$arrow-right-height: 11px;
$arrow-right-total-width: 56px;
$arrow-right-total-height: 65px;
$arrow-right-image: '../img/sprite.png';
$arrow-right: (44px, 14px, -44px, -14px, 9px, 11px, 56px, 65px, '../img/sprite.png', 'arrow-right', );
$arrow-name: 'arrow';
$arrow-x: 0px;
$arrow-y: 0px;
$arrow-offset-x: 0px;
$arrow-offset-y: 0px;
$arrow-width: 39px;
$arrow-height: 65px;
$arrow-total-width: 56px;
$arrow-total-height: 65px;
$arrow-image: '../img/sprite.png';
$arrow: (0px, 0px, 0px, 0px, 39px, 65px, 56px, 65px, '../img/sprite.png', 'arrow', );
$check-name: 'check';
$check-x: 44px;
$check-y: 0px;
$check-offset-x: -44px;
$check-offset-y: 0px;
$check-width: 12px;
$check-height: 9px;
$check-total-width: 56px;
$check-total-height: 65px;
$check-image: '../img/sprite.png';
$check: (44px, 0px, -44px, 0px, 12px, 9px, 56px, 65px, '../img/sprite.png', 'check', );
$arrow-bottom-2x-name: 'arrow-bottom_2x';
$arrow-bottom-2x-x: 88px;
$arrow-bottom-2x-y: 60px;
$arrow-bottom-2x-offset-x: -88px;
$arrow-bottom-2x-offset-y: -60px;
$arrow-bottom-2x-width: 20px;
$arrow-bottom-2x-height: 16px;
$arrow-bottom-2x-total-width: 112px;
$arrow-bottom-2x-total-height: 130px;
$arrow-bottom-2x-image: '../img/sprite@2x.png';
$arrow-bottom-2x: (88px, 60px, -88px, -60px, 20px, 16px, 112px, 130px, '../img/sprite@2x.png', 'arrow-bottom_2x', );
$arrow-right-2x-name: 'arrow-right_2x';
$arrow-right-2x-x: 88px;
$arrow-right-2x-y: 28px;
$arrow-right-2x-offset-x: -88px;
$arrow-right-2x-offset-y: -28px;
$arrow-right-2x-width: 18px;
$arrow-right-2x-height: 22px;
$arrow-right-2x-total-width: 112px;
$arrow-right-2x-total-height: 130px;
$arrow-right-2x-image: '../img/sprite@2x.png';
$arrow-right-2x: (88px, 28px, -88px, -28px, 18px, 22px, 112px, 130px, '../img/sprite@2x.png', 'arrow-right_2x', );
$arrow-2x-name: 'arrow_2x';
$arrow-2x-x: 0px;
$arrow-2x-y: 0px;
$arrow-2x-offset-x: 0px;
$arrow-2x-offset-y: 0px;
$arrow-2x-width: 78px;
$arrow-2x-height: 130px;
$arrow-2x-total-width: 112px;
$arrow-2x-total-height: 130px;
$arrow-2x-image: '../img/sprite@2x.png';
$arrow-2x: (0px, 0px, 0px, 0px, 78px, 130px, 112px, 130px, '../img/sprite@2x.png', 'arrow_2x', );
$check-2x-name: 'check_2x';
$check-2x-x: 88px;
$check-2x-y: 0px;
$check-2x-offset-x: -88px;
$check-2x-offset-y: 0px;
$check-2x-width: 24px;
$check-2x-height: 18px;
$check-2x-total-width: 112px;
$check-2x-total-height: 130px;
$check-2x-image: '../img/sprite@2x.png';
$check-2x: (88px, 0px, -88px, 0px, 24px, 18px, 112px, 130px, '../img/sprite@2x.png', 'check_2x', );
$spritesheet-width: 56px;
$spritesheet-height: 65px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($arrow-bottom, $arrow-right, $arrow, $check, );
$spritesheet: (56px, 65px, '../img/sprite.png', $spritesheet-sprites, );
$retina-spritesheet-width: 112px;
$retina-spritesheet-height: 130px;
$retina-spritesheet-image: '../img/sprite@2x.png';
$retina-spritesheet-sprites: ($arrow-bottom-2x, $arrow-right-2x, $arrow-2x, $check-2x, );
$retina-spritesheet: (112px, 130px, '../img/sprite@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$arrow-bottom-group-name: 'arrow-bottom';
$arrow-bottom-group: ('arrow-bottom', $arrow-bottom, $arrow-bottom-2x, );
$arrow-right-group-name: 'arrow-right';
$arrow-right-group: ('arrow-right', $arrow-right, $arrow-right-2x, );
$arrow-group-name: 'arrow';
$arrow-group: ('arrow', $arrow, $arrow-2x, );
$check-group-name: 'check';
$check-group: ('check', $check, $check-2x, );
$retina-groups: ($arrow-bottom-group, $arrow-right-group, $arrow-group, $check-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
